// generated by jsonenums -type=TestType; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_TestTypeNameToValue = map[string]TestType{
		"IOTest":    IOTest,
		"JUnitTest": JUnitTest,
		"xUnitTest": xUnitTest,
		"PyTest":    PyTest,
		"Matlab":    Matlab,
	}

	_TestTypeValueToName = map[TestType]string{
		IOTest:    "IOTest",
		JUnitTest: "JUnitTest",
		xUnitTest: "xUnitTest",
		PyTest:    "PyTest",
		Matlab:    "Matlab",
	}
)

func init() {
	var v TestType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TestTypeNameToValue = map[string]TestType{
			interface{}(IOTest).(fmt.Stringer).String():    IOTest,
			interface{}(JUnitTest).(fmt.Stringer).String(): JUnitTest,
			interface{}(xUnitTest).(fmt.Stringer).String(): xUnitTest,
			interface{}(PyTest).(fmt.Stringer).String():    PyTest,
			interface{}(Matlab).(fmt.Stringer).String():    Matlab,
		}
	}
}

// MarshalJSON is generated so TestType satisfies json.Marshaler.
func (r TestType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TestTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid TestType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so TestType satisfies json.Unmarshaler.
func (r *TestType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TestType should be a string, got %s", data)
	}
	v, ok := _TestTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid TestType %q", s)
	}
	*r = v
	return nil
}
