// generated by jsonenums -type=Compiler; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_CompilerNameToValue = map[string]Compiler{
		"JavaCompiler":   JavaCompiler,
		"CCompiler":      CCompiler,
		"FsharpCompiler": FsharpCompiler,
		"PythonCompiler": PythonCompiler,
		"MatlabCompiler": MatlabCompiler,
	}

	_CompilerValueToName = map[Compiler]string{
		JavaCompiler:   "JavaCompiler",
		CCompiler:      "CCompiler",
		FsharpCompiler: "FsharpCompiler",
		PythonCompiler: "PythonCompiler",
		MatlabCompiler: "MatlabCompiler",
	}
)

func init() {
	var v Compiler
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_CompilerNameToValue = map[string]Compiler{
			interface{}(JavaCompiler).(fmt.Stringer).String():   JavaCompiler,
			interface{}(CCompiler).(fmt.Stringer).String():      CCompiler,
			interface{}(FsharpCompiler).(fmt.Stringer).String(): FsharpCompiler,
			interface{}(PythonCompiler).(fmt.Stringer).String(): PythonCompiler,
			interface{}(MatlabCompiler).(fmt.Stringer).String(): MatlabCompiler,
		}
	}
}

// MarshalJSON is generated so Compiler satisfies json.Marshaler.
func (r Compiler) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _CompilerValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Compiler: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Compiler satisfies json.Unmarshaler.
func (r *Compiler) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Compiler should be a string, got %s", data)
	}
	v, ok := _CompilerNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Compiler %q", s)
	}
	*r = v
	return nil
}
